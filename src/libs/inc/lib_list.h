#ifndef __LIB_LIST_H__
#define __LIB_LIST_H__

#ifdef __cplusplus
extern "C"
{
#endif


typedef struct lib_list{
	struct lib_list *next;
	struct lib_list *prev;
	unsigned char data_mask;
	unsigned int datalen;
	void *data;
}LIST_T;

/*******************************************************************************************************************
**	函数名:List_Add
**	描	述:链表增加节点，无链表时，新创链表
**	参	数:[in/out]head:链表头节点
**		   [in]data:待加入链表的数据
**		   [in]datalen:数据长度
**		   [in]mask:数据类型掩码
**	返回值:链表头节点
********************************************************************************************************************/
LIST_T *List_Add(LIST_T **head, void *data, int datalen, char mask);

/*******************************************************************************************************************
**	函数名:List_Get_Head
**	描	述:获取链表头节点
**	参	数:[in/out]head:链表头节点
**		   [in]data:待取节点数据缓存区
**		   [in]buflen:缓存长度
**	返回值:链表头节点
********************************************************************************************************************/
char List_Get_Head(LIST_T **head, void *buf, int buflen);

/*******************************************************************************************************************
**	函数名:List_Get_Tail
**	描	述:获取链表头节点
**	参	数:[in/out]head:链表尾节点
**		   [in]data:待取节点数据缓存区
**		   [in]buflen:缓存长度
**	返回值:链表头节点
********************************************************************************************************************/
char List_Get_Tail(LIST_T **head, void *buf, int buflen);

/*******************************************************************************************************************
**	函数名:List_Del_Node
**	描	述:删除节点
**	参	数:[in]node:待删除节点
**	返回值:无
********************************************************************************************************************/
void List_Del_Node(LIST_T *node);

/*******************************************************************************************************************
**	函数名:List_Del_List
**	描	述:删除整条链表
**	参	数:[in/out]head:链表尾节点
**	返回值:无
********************************************************************************************************************/
void List_Del_List(LIST_T **head);

/*******************************************************************************************************************
**	函数名:List_Get_Tail
**	描	述:获取链表头节点
**	参	数:[in/out]head:链表尾节点
**		   [in]data:待取节点数据缓存区
**		   [in]buflen:缓存长度
**	返回值:链表头节点
********************************************************************************************************************/
LIST_T *List_Node_Poll(LIST_T **head);

/*******************************************************************************************************************
**	函数名:List_Select_Node
**	描	述:获取链表某个节点
**	参	数:[in]head:链表尾节点
**		   [in]select_node:外部实现查询策略
**	返回值:链表节点
********************************************************************************************************************/
LIST_T *List_Select_Node(LIST_T *head, char (*select_node)(void *data));

/*******************************************************************************************************************
**	函数名:List_Select_Node_Data
**	描	述:获取链表某个节点数据域
**	参	数:[in]head:链表尾节点
**		   [in]select_node:外部实现查询策略
**		   [in]mask:数据域掩码
**	返回值:链表节点数据
********************************************************************************************************************/
void *List_Select_Node_Data(LIST_T *head, char (*select_node)(void *data), char mask);

#ifdef __cplusplus
}
#endif

#endif
